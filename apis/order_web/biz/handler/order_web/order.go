// Code generated by hertz generator.

package order_web

import (
	"context"
	"errors"
	"strconv"

	"StayEaseGo/apis/order_web/biz/global"
	order_web "StayEaseGo/apis/order_web/biz/model/order_web"
	pb "StayEaseGo/srvs/order_srv/proto/gen"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
)

// CreateHomestayOrder .
// @router /api/v1/order [POST]
func CreateHomestayOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order_web.CreateHomestayOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		c.JSON(consts.StatusUnauthorized, err.Error())
		return
	}

	var rpcReq pb.CreateHomestayOrderReq
	copier.Copy(&rpcReq, &req)
	rpcReq.UserId = userID
	rpcResp, err := global.OrderSrvClient.CreateHomestayOrder(ctx, &rpcReq)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, err.Error())
	}

	c.JSON(consts.StatusOK, &order_web.CreateHomestayOrderResp{
		Sn: rpcResp.Sn,
	})
}

// HomestayOrderDetail .
// @router /api/v1/order/detail [POST]
func HomestayOrderDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order_web.HomestayOrderDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		c.JSON(consts.StatusUnauthorized, err.Error())
		return
	}
	rpcResp, err := global.OrderSrvClient.HomestayOrderDetail(ctx, &pb.HomestayOrderDetailReq{})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, err.Error())
		return
	}

	if rpcResp != nil && rpcResp.HomestayOrder.UserId == userID {
		resp := new(order_web.HomestayOrder)
		copier.Copy(&resp, &rpcResp.HomestayOrder)
		c.JSON(consts.StatusOK, &order_web.HomestayOrderDetailResp{
			HomestayOrder: resp,
		},
		)
		return
	}
	c.JSON(consts.StatusInternalServerError, "can not find order or order not belong to you")
}

// UserHomestayOrderList .
// @router /api/v1/order/list [POST]
func UserHomestayOrderList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order_web.UserHomestayOrderListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		c.JSON(consts.StatusUnauthorized, err.Error())
		return
	}
	rpcResp, err := global.OrderSrvClient.UserHomestayOrderList(ctx, &pb.UserHomestayOrderListReq{
		LastId:      req.LastId,
		PageSize:    req.PageSize,
		TraderState: req.TraderState,
		UserId:      userID,
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, err.Error())
		return
	}
	resp := make([]*order_web.HomestayOrder, len(rpcResp.List))
	for i := range len(rpcResp.List) {
		copier.Copy(&resp[i], &rpcResp.List[i])
	}

	c.JSON(consts.StatusOK, &order_web.UserHomestayOrderListResp{
		List: resp,
	})
}

func getUserID(c *app.RequestContext) (int64, error) {
	v, exist := c.Get("userID")
	if !exist || v == nil {
		return 0, errors.New("Unauthorized")
	}
	i, err := strconv.ParseInt(v.(string), 10, 64)
	if err != nil {
		return 0, err
	}
	return i, nil
}
