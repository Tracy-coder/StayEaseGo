// Code generated by hertz generator.

package payment_web

import (
	"context"
	"errors"
	"net/http"
	"strconv"

	"StayEaseGo/apis/payment_web/biz/global"
	payment_web "StayEaseGo/apis/payment_web/biz/model/payment_web"
	order_srv "StayEaseGo/srvs/order_srv/proto/gen"
	payment_srv "StayEaseGo/srvs/payment_srv/proto/gen"
	user_srv "StayEaseGo/srvs/user_srv/proto/gen"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	log "github.com/sirupsen/logrus"
	"github.com/wechatpay-apiv3/wechatpay-go/core"
	"github.com/wechatpay-apiv3/wechatpay-go/core/auth/verifiers"
	"github.com/wechatpay-apiv3/wechatpay-go/core/downloader"
	"github.com/wechatpay-apiv3/wechatpay-go/core/notify"
	"github.com/wechatpay-apiv3/wechatpay-go/services/payments"
	"github.com/wechatpay-apiv3/wechatpay-go/services/payments/jsapi"
)

// ThirdPaymentWxPay .
// @router /api/v1/pay/wxpay [POST]
func ThirdPaymentWxPay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment_web.ThirdPaymentWxPayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		c.JSON(consts.StatusUnauthorized, err.Error())
		return
	}
	orderDetailRpcResp, err := global.OrderSrvClient.HomestayOrderDetail(ctx, &order_srv.HomestayOrderDetailReq{
		Sn: req.OrderSn,
	})
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}

	if userID != orderDetailRpcResp.HomestayOrder.UserId {
		c.JSON(consts.StatusUnauthorized, "not your order")
		return
	}
	userAuthRpcResp, err := global.UserSrvClient.GetUserAuthByUserId(ctx, &user_srv.GetUserAuthByUserIDReq{
		UserID: userID,
	})
	if err != nil || userAuthRpcResp.UserAuth == nil {
		c.JSON(consts.StatusUnauthorized, "get user failed")
		return
	}
	createPaymentRpcResp, err := global.PaymentSrvClient.CreatePayment(ctx, &payment_srv.CreatePaymentReq{
		UserId:      userID,
		OrderSn:     req.OrderSn,
		PayTotal:    orderDetailRpcResp.HomestayOrder.OrderTotalPrice,
		ServiceType: req.ServiceType,
		PayModel:    global.ThirdPaymentWxPay,
	})
	if err != nil || createPaymentRpcResp.Sn == "" {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	jsApiSvc := jsapi.JsapiApiService{Client: global.WXPayClient}

	// Get the prepay_id, as well as the parameters and signatures needed to invoke the payment
	prepayApiResp, _, err := jsApiSvc.PrepayWithRequestPayment(ctx,
		jsapi.PrepayRequest{
			Appid:       core.String(global.GlobalServerConfig.WxMiniConf.AppId),
			Mchid:       core.String(global.GlobalServerConfig.WxPayConf.MchId),
			Description: core.String("homestay pay"),
			OutTradeNo:  core.String(createPaymentRpcResp.Sn),
			Attach:      core.String("homestay pay"),
			NotifyUrl:   core.String(global.GlobalServerConfig.WxPayConf.NotifyUrl),
			Amount: &jsapi.Amount{
				Total: core.Int64(orderDetailRpcResp.HomestayOrder.OrderTotalPrice),
			},
			Payer: &jsapi.Payer{
				Openid: core.String(userAuthRpcResp.UserAuth.AuthKey),
			},
		},
	)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}

	c.JSON(consts.StatusOK, &payment_web.ThirdPaymentWxPayResp{
		Appid:     global.GlobalServerConfig.WxMiniConf.AppId,
		PaySign:   *prepayApiResp.PaySign,
		SignType:  *prepayApiResp.SignType,
		NonceStr:  *prepayApiResp.NonceStr,
		Package:   *prepayApiResp.Package,
		Timestamp: *prepayApiResp.TimeStamp,
	})
}

// ThirdPaymentWxPayCallback .
// @router /api/v1/pay/wxpay/callback [POST]
func ThirdPaymentWxPayCallback(resp http.ResponseWriter, req *http.Request) {
	req.ParseForm()
	certVisitor := downloader.MgrInstance().GetCertificateVisitor(global.GlobalServerConfig.WxPayConf.MchId)
	handler := notify.NewNotifyHandler(global.GlobalServerConfig.WxPayConf.APIv3Key, verifiers.NewSHA256WithRSAVerifier(certVisitor))
	//Verifying signatures, parsing data
	transaction := new(payments.Transaction)
	notifyReq, err := handler.ParseNotifyRequest(context.Background(), req, transaction)
	if err != nil {
		resp.WriteHeader(500)
		return
	}
	log.Info(notifyReq)
	// todo:验证状态 && 更新订单状态
	resp.WriteHeader(200)
}

func getUserID(c *app.RequestContext) (int64, error) {
	v, exist := c.Get("userID")
	if !exist || v == nil {
		return 0, errors.New("Unauthorized")
	}
	i, err := strconv.ParseInt(v.(string), 10, 64)
	if err != nil {
		return 0, err
	}
	return i, nil
}
