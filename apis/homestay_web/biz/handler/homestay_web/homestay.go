// Code generated by hertz generator.

package homestay_web

import (
	"context"
	"strconv"

	"StayEaseGo/apis/homestay_web/biz/global"
	base "StayEaseGo/apis/homestay_web/biz/model/base"
	homestay_web "StayEaseGo/apis/homestay_web/biz/model/homestay_web"
	"StayEaseGo/pkg/result"
	"StayEaseGo/pkg/xerr"
	pb "StayEaseGo/srvs/homestay_srv/proto/gen"
	user_srv "StayEaseGo/srvs/user_srv/proto/gen"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
	"github.com/pkg/errors"
)

// HomestayDetail .
// @router /api/v1/homestay/detail [POST]
func HomestayDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req homestay_web.HomestayDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		result.HttpResult(c, consts.StatusBadRequest, nil, xerr.NewErrCodeMsg(xerr.REUQEST_PARAM_ERROR, err.Error()))
		return
	}
	rpcResp, err := global.HomestaySrvClient.HomestayDetail(ctx, &pb.HomestayDetailReq{ID: req.ID})
	if err != nil {
		result.HttpResult(c, consts.StatusInternalServerError, nil, errors.Wrap(err, "get homestay detail failed"))
		return
	}
	homestayDetail := new(homestay_web.Homestay)
	_ = copier.Copy(homestayDetail, rpcResp.Homestay)
	resp := new(homestay_web.HomestayDetailResp)
	resp.Homestay = homestayDetail
	result.HttpResult(c, consts.StatusOK, resp, nil)
}

// HomestayList .
// @router /api/v1/homestay/list [POST]
func HomestayList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req homestay_web.HomestayListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		result.HttpResult(c, consts.StatusBadRequest, nil, xerr.NewErrCodeMsg(xerr.REUQEST_PARAM_ERROR, err.Error()))
		return
	}

	resp := new(homestay_web.HomestayListResp)
	rpcReq := new(pb.HomestayListReq)
	_ = copier.Copy(rpcReq, &req)
	rpcResp, err := global.HomestaySrvClient.HomestayList(ctx, rpcReq)
	if err != nil {
		result.HttpResult(c, consts.StatusInternalServerError, nil, errors.Wrap(err, "get homestay list failed"))
	}
	n := len(rpcResp.Homestays)
	homestays := make([]*homestay_web.Homestay, n)
	for i := range n {
		copier.Copy(homestays[i], rpcResp.Homestays[i])
	}
	resp.Homestays = homestays

	result.HttpResult(c, consts.StatusOK, resp, nil)
}

// CreateHomestay .
// @router /api/v1/homestay [POST]
func CreateHomestay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req homestay_web.CreateHomestayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		result.HttpResult(c, consts.StatusBadRequest, nil, xerr.NewErrCodeMsg(xerr.REUQEST_PARAM_ERROR, err.Error()))
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		result.HttpResult(c, consts.StatusUnauthorized, nil, err)
	}
	rpcReq := new(pb.Homestay)
	_ = copier.Copy(rpcReq, req.Homestay)
	rpcReq.HomestayBusinessBossID = userID
	_, err = global.HomestaySrvClient.CreateHomestay(ctx, &pb.CreateHomestayReq{Homestay: rpcReq})
	if err != nil {
		result.HttpResult(c, consts.StatusInternalServerError, nil, errors.Wrap(err, "create homestay failed"))
	}
	result.HttpResult(c, consts.StatusOK, &base.Empty{}, nil)
}

func getUserID(c *app.RequestContext) (int64, error) {
	v, exist := c.Get("userID")
	if !exist || v == nil {
		return 0, xerr.NewErrCode(xerr.TOKEN_PARSE_ERROR)
	}
	i, err := strconv.ParseInt(v.(string), 10, 64)
	if err != nil {
		return 0, xerr.NewErrCode(xerr.TOKEN_PARSE_ERROR)
	}
	return i, nil
}

// HomestayBusinessBossDetail .
// @router /api/v1/homestayboss [POST]
func HomestayBusinessBossDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req homestay_web.HomestayBusinessBossDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		result.HttpResult(c, consts.StatusBadRequest, nil, xerr.NewErrCodeMsg(xerr.REUQEST_PARAM_ERROR, err.Error()))
		return
	}

	resp := new(homestay_web.HomestayBusinessBossDetailResp)
	homestayRpcResp, err := global.HomestaySrvClient.HomestayDetail(ctx, &pb.HomestayDetailReq{ID: req.ID})
	if err != nil {
		result.HttpResult(c, consts.StatusInternalServerError, nil, errors.Wrap(err, "get homestay detail failed"))
	}
	userRpcResp, err := global.UserSrvClient.GetUserInfo(ctx, &user_srv.GetUserInfoReq{Id: homestayRpcResp.Homestay.HomestayBusinessBossID})
	if err != nil {
		result.HttpResult(c, consts.StatusInternalServerError, nil, errors.Wrap(err, "get boss info failed"))
	}
	copier.Copy(resp, userRpcResp.User)
	result.HttpResult(c, consts.StatusOK, resp, nil)
}
